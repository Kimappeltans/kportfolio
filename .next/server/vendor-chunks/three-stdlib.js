"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-stdlib";
exports.ids = ["vendor-chunks/three-stdlib"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-stdlib/controls/OrbitControls.js":
/*!*************************************************************!*\
  !*** ./node_modules/three-stdlib/controls/OrbitControls.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapControls: () => (/* binding */ MapControls),\n/* harmony export */   OrbitControls: () => (/* binding */ OrbitControls)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\n\nconst _ray = new three__WEBPACK_IMPORTED_MODULE_0__.Ray();\nconst _plane = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180));\nconst moduloWrapAround = (offset, capacity)=>(offset % capacity + capacity) % capacity;\nclass OrbitControls extends three__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {\n    constructor(object, domElement){\n        super();\n        __publicField(this, \"object\");\n        __publicField(this, \"domElement\");\n        // Set to false to disable this control\n        __publicField(this, \"enabled\", true);\n        // \"target\" sets the location of focus, where the object orbits around\n        __publicField(this, \"target\", new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        __publicField(this, \"minDistance\", 0);\n        __publicField(this, \"maxDistance\", Infinity);\n        // How far you can zoom in and out ( OrthographicCamera only )\n        __publicField(this, \"minZoom\", 0);\n        __publicField(this, \"maxZoom\", Infinity);\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        __publicField(this, \"minPolarAngle\", 0);\n        // radians\n        __publicField(this, \"maxPolarAngle\", Math.PI);\n        // radians\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n        __publicField(this, \"minAzimuthAngle\", -Infinity);\n        // radians\n        __publicField(this, \"maxAzimuthAngle\", Infinity);\n        // radians\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        __publicField(this, \"enableDamping\", false);\n        __publicField(this, \"dampingFactor\", 0.05);\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        __publicField(this, \"enableZoom\", true);\n        __publicField(this, \"zoomSpeed\", 1);\n        // Set to false to disable rotating\n        __publicField(this, \"enableRotate\", true);\n        __publicField(this, \"rotateSpeed\", 1);\n        // Set to false to disable panning\n        __publicField(this, \"enablePan\", true);\n        __publicField(this, \"panSpeed\", 1);\n        __publicField(this, \"screenSpacePanning\", true);\n        // if false, pan orthogonal to world-space direction camera.up\n        __publicField(this, \"keyPanSpeed\", 7);\n        // pixels moved per arrow key push\n        __publicField(this, \"zoomToCursor\", false);\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        __publicField(this, \"autoRotate\", false);\n        __publicField(this, \"autoRotateSpeed\", 2);\n        // 30 seconds per orbit when fps is 60\n        __publicField(this, \"reverseOrbit\", false);\n        // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n        __publicField(this, \"reverseHorizontalOrbit\", false);\n        // true if you want to reverse the horizontal orbit direction\n        __publicField(this, \"reverseVerticalOrbit\", false);\n        // true if you want to reverse the vertical orbit direction\n        // The four arrow keys\n        __publicField(this, \"keys\", {\n            LEFT: \"ArrowLeft\",\n            UP: \"ArrowUp\",\n            RIGHT: \"ArrowRight\",\n            BOTTOM: \"ArrowDown\"\n        });\n        // Mouse buttons\n        __publicField(this, \"mouseButtons\", {\n            LEFT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE,\n            MIDDLE: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY,\n            RIGHT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN\n        });\n        // Touch fingers\n        __publicField(this, \"touches\", {\n            ONE: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE,\n            TWO: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN\n        });\n        __publicField(this, \"target0\");\n        __publicField(this, \"position0\");\n        __publicField(this, \"zoom0\");\n        // the target DOM element for key events\n        __publicField(this, \"_domElementKeyEvents\", null);\n        __publicField(this, \"getPolarAngle\");\n        __publicField(this, \"getAzimuthalAngle\");\n        __publicField(this, \"setPolarAngle\");\n        __publicField(this, \"setAzimuthalAngle\");\n        __publicField(this, \"getDistance\");\n        __publicField(this, \"listenToKeyEvents\");\n        __publicField(this, \"stopListenToKeyEvents\");\n        __publicField(this, \"saveState\");\n        __publicField(this, \"reset\");\n        __publicField(this, \"update\");\n        __publicField(this, \"connect\");\n        __publicField(this, \"dispose\");\n        this.object = object;\n        this.domElement = domElement;\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n        this.getPolarAngle = ()=>spherical.phi;\n        this.getAzimuthalAngle = ()=>spherical.theta;\n        this.setPolarAngle = (value)=>{\n            let phi = moduloWrapAround(value, 2 * Math.PI);\n            let currentPhi = spherical.phi;\n            if (currentPhi < 0) currentPhi += 2 * Math.PI;\n            if (phi < 0) phi += 2 * Math.PI;\n            let phiDist = Math.abs(phi - currentPhi);\n            if (2 * Math.PI - phiDist < phiDist) {\n                if (phi < currentPhi) {\n                    phi += 2 * Math.PI;\n                } else {\n                    currentPhi += 2 * Math.PI;\n                }\n            }\n            sphericalDelta.phi = phi - currentPhi;\n            scope.update();\n        };\n        this.setAzimuthalAngle = (value)=>{\n            let theta = moduloWrapAround(value, 2 * Math.PI);\n            let currentTheta = spherical.theta;\n            if (currentTheta < 0) currentTheta += 2 * Math.PI;\n            if (theta < 0) theta += 2 * Math.PI;\n            let thetaDist = Math.abs(theta - currentTheta);\n            if (2 * Math.PI - thetaDist < thetaDist) {\n                if (theta < currentTheta) {\n                    theta += 2 * Math.PI;\n                } else {\n                    currentTheta += 2 * Math.PI;\n                }\n            }\n            sphericalDelta.theta = theta - currentTheta;\n            scope.update();\n        };\n        this.getDistance = ()=>scope.object.position.distanceTo(scope.target);\n        this.listenToKeyEvents = (domElement2)=>{\n            domElement2.addEventListener(\"keydown\", onKeyDown);\n            this._domElementKeyEvents = domElement2;\n        };\n        this.stopListenToKeyEvents = ()=>{\n            this._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n            this._domElementKeyEvents = null;\n        };\n        this.saveState = ()=>{\n            scope.target0.copy(scope.target);\n            scope.position0.copy(scope.object.position);\n            scope.zoom0 = scope.object.zoom;\n        };\n        this.reset = ()=>{\n            scope.target.copy(scope.target0);\n            scope.object.position.copy(scope.position0);\n            scope.object.zoom = scope.zoom0;\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent(changeEvent);\n            scope.update();\n            state = STATE.NONE;\n        };\n        this.update = (()=>{\n            const offset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            const up = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0);\n            const quat = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion().setFromUnitVectors(object.up, up);\n            const quatInverse = quat.clone().invert();\n            const lastPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            const lastQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();\n            const twoPI = 2 * Math.PI;\n            return function update() {\n                const position = scope.object.position;\n                quat.setFromUnitVectors(object.up, up);\n                quatInverse.copy(quat).invert();\n                offset.copy(position).sub(scope.target);\n                offset.applyQuaternion(quat);\n                spherical.setFromVector3(offset);\n                if (scope.autoRotate && state === STATE.NONE) {\n                    rotateLeft(getAutoRotationAngle());\n                }\n                if (scope.enableDamping) {\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n                } else {\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n                }\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n                if (isFinite(min) && isFinite(max)) {\n                    if (min < -Math.PI) min += twoPI;\n                    else if (min > Math.PI) min -= twoPI;\n                    if (max < -Math.PI) max += twoPI;\n                    else if (max > Math.PI) max -= twoPI;\n                    if (min <= max) {\n                        spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n                    } else {\n                        spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n                    }\n                }\n                spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n                spherical.makeSafe();\n                if (scope.enableDamping === true) {\n                    scope.target.addScaledVector(panOffset, scope.dampingFactor);\n                } else {\n                    scope.target.add(panOffset);\n                }\n                if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {\n                    spherical.radius = clampDistance(spherical.radius);\n                } else {\n                    spherical.radius = clampDistance(spherical.radius * scale);\n                }\n                offset.setFromSpherical(spherical);\n                offset.applyQuaternion(quatInverse);\n                position.copy(scope.target).add(offset);\n                if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix();\n                scope.object.lookAt(scope.target);\n                if (scope.enableDamping === true) {\n                    sphericalDelta.theta *= 1 - scope.dampingFactor;\n                    sphericalDelta.phi *= 1 - scope.dampingFactor;\n                    panOffset.multiplyScalar(1 - scope.dampingFactor);\n                } else {\n                    sphericalDelta.set(0, 0, 0);\n                    panOffset.set(0, 0, 0);\n                }\n                let zoomChanged = false;\n                if (scope.zoomToCursor && performCursorZoom) {\n                    let newRadius = null;\n                    if (scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera && scope.object.isPerspectiveCamera) {\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance(prevRadius * scale);\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n                        scope.object.updateMatrixWorld();\n                    } else if (scope.object.isOrthographicCamera) {\n                        const mouseBefore = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(mouse.x, mouse.y, 0);\n                        mouseBefore.unproject(scope.object);\n                        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n                        const mouseAfter = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(mouse.x, mouse.y, 0);\n                        mouseAfter.unproject(scope.object);\n                        scope.object.position.sub(mouseAfter).add(mouseBefore);\n                        scope.object.updateMatrixWorld();\n                        newRadius = offset.length();\n                    } else {\n                        console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n                        scope.zoomToCursor = false;\n                    }\n                    if (newRadius !== null) {\n                        if (scope.screenSpacePanning) {\n                            scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);\n                        } else {\n                            _ray.origin.copy(scope.object.position);\n                            _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);\n                            if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                                object.lookAt(scope.target);\n                            } else {\n                                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);\n                                _ray.intersectPlane(_plane, scope.target);\n                            }\n                        }\n                    }\n                } else if (scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera && scope.object.isOrthographicCamera) {\n                    zoomChanged = scale !== 1;\n                    if (zoomChanged) {\n                        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n                        scope.object.updateProjectionMatrix();\n                    }\n                }\n                scale = 1;\n                performCursorZoom = false;\n                if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n                    scope.dispatchEvent(changeEvent);\n                    lastPosition.copy(scope.object.position);\n                    lastQuaternion.copy(scope.object.quaternion);\n                    zoomChanged = false;\n                    return true;\n                }\n                return false;\n            };\n        })();\n        this.connect = (domElement2)=>{\n            if (domElement2 === document) {\n                console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n            }\n            scope.domElement = domElement2;\n            scope.domElement.style.touchAction = \"none\";\n            scope.domElement.addEventListener(\"contextmenu\", onContextMenu);\n            scope.domElement.addEventListener(\"pointerdown\", onPointerDown);\n            scope.domElement.addEventListener(\"pointercancel\", onPointerCancel);\n            scope.domElement.addEventListener(\"wheel\", onMouseWheel);\n        };\n        this.dispose = ()=>{\n            var _a, _b, _c, _d, _e, _f;\n            (_a = scope.domElement) == null ? void 0 : _a.removeEventListener(\"contextmenu\", onContextMenu);\n            (_b = scope.domElement) == null ? void 0 : _b.removeEventListener(\"pointerdown\", onPointerDown);\n            (_c = scope.domElement) == null ? void 0 : _c.removeEventListener(\"pointercancel\", onPointerCancel);\n            (_d = scope.domElement) == null ? void 0 : _d.removeEventListener(\"wheel\", onMouseWheel);\n            (_e = scope.domElement) == null ? void 0 : _e.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n            (_f = scope.domElement) == null ? void 0 : _f.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n            if (scope._domElementKeyEvents !== null) {\n                scope._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n            }\n        };\n        const scope = this;\n        const changeEvent = {\n            type: \"change\"\n        };\n        const startEvent = {\n            type: \"start\"\n        };\n        const endEvent = {\n            type: \"end\"\n        };\n        const STATE = {\n            NONE: -1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n        let state = STATE.NONE;\n        const EPS = 1e-6;\n        const spherical = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        const sphericalDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        let scale = 1;\n        const panOffset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        const rotateStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const rotateEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const rotateDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const panStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const panEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const panDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyDirection = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        const mouse = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        let performCursorZoom = false;\n        const pointers = [];\n        const pointerPositions = {};\n        function getAutoRotationAngle() {\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n        }\n        function getZoomScale() {\n            return Math.pow(0.95, scope.zoomSpeed);\n        }\n        function rotateLeft(angle) {\n            if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n                sphericalDelta.theta += angle;\n            } else {\n                sphericalDelta.theta -= angle;\n            }\n        }\n        function rotateUp(angle) {\n            if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n                sphericalDelta.phi += angle;\n            } else {\n                sphericalDelta.phi -= angle;\n            }\n        }\n        const panLeft = (()=>{\n            const v = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            return function panLeft2(distance, objectMatrix) {\n                v.setFromMatrixColumn(objectMatrix, 0);\n                v.multiplyScalar(-distance);\n                panOffset.add(v);\n            };\n        })();\n        const panUp = (()=>{\n            const v = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            return function panUp2(distance, objectMatrix) {\n                if (scope.screenSpacePanning === true) {\n                    v.setFromMatrixColumn(objectMatrix, 1);\n                } else {\n                    v.setFromMatrixColumn(objectMatrix, 0);\n                    v.crossVectors(scope.object.up, v);\n                }\n                v.multiplyScalar(distance);\n                panOffset.add(v);\n            };\n        })();\n        const pan = (()=>{\n            const offset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            return function pan2(deltaX, deltaY) {\n                const element = scope.domElement;\n                if (element && scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera && scope.object.isPerspectiveCamera) {\n                    const position = scope.object.position;\n                    offset.copy(position).sub(scope.target);\n                    let targetDistance = offset.length();\n                    targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);\n                    panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n                    panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n                } else if (element && scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera && scope.object.isOrthographicCamera) {\n                    panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n                    panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n                } else {\n                    console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n                    scope.enablePan = false;\n                }\n            };\n        })();\n        function dollyOut(dollyScale) {\n            if (scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera && scope.object.isPerspectiveCamera || scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera && scope.object.isOrthographicCamera) {\n                scale /= dollyScale;\n            } else {\n                console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n                scope.enableZoom = false;\n            }\n        }\n        function dollyIn(dollyScale) {\n            if (scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera && scope.object.isPerspectiveCamera || scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera && scope.object.isOrthographicCamera) {\n                scale *= dollyScale;\n            } else {\n                console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n                scope.enableZoom = false;\n            }\n        }\n        function updateMouseParameters(event) {\n            if (!scope.zoomToCursor || !scope.domElement) {\n                return;\n            }\n            performCursorZoom = true;\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n            mouse.x = x / w * 2 - 1;\n            mouse.y = -(y / h) * 2 + 1;\n            dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();\n        }\n        function clampDistance(dist) {\n            return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n        }\n        function handleMouseDownRotate(event) {\n            rotateStart.set(event.clientX, event.clientY);\n        }\n        function handleMouseDownDolly(event) {\n            updateMouseParameters(event);\n            dollyStart.set(event.clientX, event.clientY);\n        }\n        function handleMouseDownPan(event) {\n            panStart.set(event.clientX, event.clientY);\n        }\n        function handleMouseMoveRotate(event) {\n            rotateEnd.set(event.clientX, event.clientY);\n            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n            const element = scope.domElement;\n            if (element) {\n                rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n                rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n            }\n            rotateStart.copy(rotateEnd);\n            scope.update();\n        }\n        function handleMouseMoveDolly(event) {\n            dollyEnd.set(event.clientX, event.clientY);\n            dollyDelta.subVectors(dollyEnd, dollyStart);\n            if (dollyDelta.y > 0) {\n                dollyOut(getZoomScale());\n            } else if (dollyDelta.y < 0) {\n                dollyIn(getZoomScale());\n            }\n            dollyStart.copy(dollyEnd);\n            scope.update();\n        }\n        function handleMouseMovePan(event) {\n            panEnd.set(event.clientX, event.clientY);\n            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n            pan(panDelta.x, panDelta.y);\n            panStart.copy(panEnd);\n            scope.update();\n        }\n        function handleMouseWheel(event) {\n            updateMouseParameters(event);\n            if (event.deltaY < 0) {\n                dollyIn(getZoomScale());\n            } else if (event.deltaY > 0) {\n                dollyOut(getZoomScale());\n            }\n            scope.update();\n        }\n        function handleKeyDown(event) {\n            let needsUpdate = false;\n            switch(event.code){\n                case scope.keys.UP:\n                    pan(0, scope.keyPanSpeed);\n                    needsUpdate = true;\n                    break;\n                case scope.keys.BOTTOM:\n                    pan(0, -scope.keyPanSpeed);\n                    needsUpdate = true;\n                    break;\n                case scope.keys.LEFT:\n                    pan(scope.keyPanSpeed, 0);\n                    needsUpdate = true;\n                    break;\n                case scope.keys.RIGHT:\n                    pan(-scope.keyPanSpeed, 0);\n                    needsUpdate = true;\n                    break;\n            }\n            if (needsUpdate) {\n                event.preventDefault();\n                scope.update();\n            }\n        }\n        function handleTouchStartRotate() {\n            if (pointers.length == 1) {\n                rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n            } else {\n                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n                rotateStart.set(x, y);\n            }\n        }\n        function handleTouchStartPan() {\n            if (pointers.length == 1) {\n                panStart.set(pointers[0].pageX, pointers[0].pageY);\n            } else {\n                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n                panStart.set(x, y);\n            }\n        }\n        function handleTouchStartDolly() {\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            dollyStart.set(0, distance);\n        }\n        function handleTouchStartDollyPan() {\n            if (scope.enableZoom) handleTouchStartDolly();\n            if (scope.enablePan) handleTouchStartPan();\n        }\n        function handleTouchStartDollyRotate() {\n            if (scope.enableZoom) handleTouchStartDolly();\n            if (scope.enableRotate) handleTouchStartRotate();\n        }\n        function handleTouchMoveRotate(event) {\n            if (pointers.length == 1) {\n                rotateEnd.set(event.pageX, event.pageY);\n            } else {\n                const position = getSecondPointerPosition(event);\n                const x = 0.5 * (event.pageX + position.x);\n                const y = 0.5 * (event.pageY + position.y);\n                rotateEnd.set(x, y);\n            }\n            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n            const element = scope.domElement;\n            if (element) {\n                rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n                rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n            }\n            rotateStart.copy(rotateEnd);\n        }\n        function handleTouchMovePan(event) {\n            if (pointers.length == 1) {\n                panEnd.set(event.pageX, event.pageY);\n            } else {\n                const position = getSecondPointerPosition(event);\n                const x = 0.5 * (event.pageX + position.x);\n                const y = 0.5 * (event.pageY + position.y);\n                panEnd.set(x, y);\n            }\n            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n            pan(panDelta.x, panDelta.y);\n            panStart.copy(panEnd);\n        }\n        function handleTouchMoveDolly(event) {\n            const position = getSecondPointerPosition(event);\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            dollyEnd.set(0, distance);\n            dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n            dollyOut(dollyDelta.y);\n            dollyStart.copy(dollyEnd);\n        }\n        function handleTouchMoveDollyPan(event) {\n            if (scope.enableZoom) handleTouchMoveDolly(event);\n            if (scope.enablePan) handleTouchMovePan(event);\n        }\n        function handleTouchMoveDollyRotate(event) {\n            if (scope.enableZoom) handleTouchMoveDolly(event);\n            if (scope.enableRotate) handleTouchMoveRotate(event);\n        }\n        function onPointerDown(event) {\n            var _a, _b;\n            if (scope.enabled === false) return;\n            if (pointers.length === 0) {\n                (_a = scope.domElement) == null ? void 0 : _a.ownerDocument.addEventListener(\"pointermove\", onPointerMove);\n                (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.addEventListener(\"pointerup\", onPointerUp);\n            }\n            addPointer(event);\n            if (event.pointerType === \"touch\") {\n                onTouchStart(event);\n            } else {\n                onMouseDown(event);\n            }\n        }\n        function onPointerMove(event) {\n            if (scope.enabled === false) return;\n            if (event.pointerType === \"touch\") {\n                onTouchMove(event);\n            } else {\n                onMouseMove(event);\n            }\n        }\n        function onPointerUp(event) {\n            var _a, _b, _c;\n            removePointer(event);\n            if (pointers.length === 0) {\n                (_a = scope.domElement) == null ? void 0 : _a.releasePointerCapture(event.pointerId);\n                (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n                (_c = scope.domElement) == null ? void 0 : _c.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n            }\n            scope.dispatchEvent(endEvent);\n            state = STATE.NONE;\n        }\n        function onPointerCancel(event) {\n            removePointer(event);\n        }\n        function onMouseDown(event) {\n            let mouseAction;\n            switch(event.button){\n                case 0:\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n                case 1:\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n                case 2:\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n                default:\n                    mouseAction = -1;\n            }\n            switch(mouseAction){\n                case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY:\n                    if (scope.enableZoom === false) return;\n                    handleMouseDownDolly(event);\n                    state = STATE.DOLLY;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE:\n                    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                        if (scope.enablePan === false) return;\n                        handleMouseDownPan(event);\n                        state = STATE.PAN;\n                    } else {\n                        if (scope.enableRotate === false) return;\n                        handleMouseDownRotate(event);\n                        state = STATE.ROTATE;\n                    }\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN:\n                    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                        if (scope.enableRotate === false) return;\n                        handleMouseDownRotate(event);\n                        state = STATE.ROTATE;\n                    } else {\n                        if (scope.enablePan === false) return;\n                        handleMouseDownPan(event);\n                        state = STATE.PAN;\n                    }\n                    break;\n                default:\n                    state = STATE.NONE;\n            }\n            if (state !== STATE.NONE) {\n                scope.dispatchEvent(startEvent);\n            }\n        }\n        function onMouseMove(event) {\n            if (scope.enabled === false) return;\n            switch(state){\n                case STATE.ROTATE:\n                    if (scope.enableRotate === false) return;\n                    handleMouseMoveRotate(event);\n                    break;\n                case STATE.DOLLY:\n                    if (scope.enableZoom === false) return;\n                    handleMouseMoveDolly(event);\n                    break;\n                case STATE.PAN:\n                    if (scope.enablePan === false) return;\n                    handleMouseMovePan(event);\n                    break;\n            }\n        }\n        function onMouseWheel(event) {\n            if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) {\n                return;\n            }\n            event.preventDefault();\n            scope.dispatchEvent(startEvent);\n            handleMouseWheel(event);\n            scope.dispatchEvent(endEvent);\n        }\n        function onKeyDown(event) {\n            if (scope.enabled === false || scope.enablePan === false) return;\n            handleKeyDown(event);\n        }\n        function onTouchStart(event) {\n            trackPointer(event);\n            switch(pointers.length){\n                case 1:\n                    switch(scope.touches.ONE){\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE:\n                            if (scope.enableRotate === false) return;\n                            handleTouchStartRotate();\n                            state = STATE.TOUCH_ROTATE;\n                            break;\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN:\n                            if (scope.enablePan === false) return;\n                            handleTouchStartPan();\n                            state = STATE.TOUCH_PAN;\n                            break;\n                        default:\n                            state = STATE.NONE;\n                    }\n                    break;\n                case 2:\n                    switch(scope.touches.TWO){\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN:\n                            if (scope.enableZoom === false && scope.enablePan === false) return;\n                            handleTouchStartDollyPan();\n                            state = STATE.TOUCH_DOLLY_PAN;\n                            break;\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE:\n                            if (scope.enableZoom === false && scope.enableRotate === false) return;\n                            handleTouchStartDollyRotate();\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n                            break;\n                        default:\n                            state = STATE.NONE;\n                    }\n                    break;\n                default:\n                    state = STATE.NONE;\n            }\n            if (state !== STATE.NONE) {\n                scope.dispatchEvent(startEvent);\n            }\n        }\n        function onTouchMove(event) {\n            trackPointer(event);\n            switch(state){\n                case STATE.TOUCH_ROTATE:\n                    if (scope.enableRotate === false) return;\n                    handleTouchMoveRotate(event);\n                    scope.update();\n                    break;\n                case STATE.TOUCH_PAN:\n                    if (scope.enablePan === false) return;\n                    handleTouchMovePan(event);\n                    scope.update();\n                    break;\n                case STATE.TOUCH_DOLLY_PAN:\n                    if (scope.enableZoom === false && scope.enablePan === false) return;\n                    handleTouchMoveDollyPan(event);\n                    scope.update();\n                    break;\n                case STATE.TOUCH_DOLLY_ROTATE:\n                    if (scope.enableZoom === false && scope.enableRotate === false) return;\n                    handleTouchMoveDollyRotate(event);\n                    scope.update();\n                    break;\n                default:\n                    state = STATE.NONE;\n            }\n        }\n        function onContextMenu(event) {\n            if (scope.enabled === false) return;\n            event.preventDefault();\n        }\n        function addPointer(event) {\n            pointers.push(event);\n        }\n        function removePointer(event) {\n            delete pointerPositions[event.pointerId];\n            for(let i = 0; i < pointers.length; i++){\n                if (pointers[i].pointerId == event.pointerId) {\n                    pointers.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        function trackPointer(event) {\n            let position = pointerPositions[event.pointerId];\n            if (position === void 0) {\n                position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n                pointerPositions[event.pointerId] = position;\n            }\n            position.set(event.pageX, event.pageY);\n        }\n        function getSecondPointerPosition(event) {\n            const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n            return pointerPositions[pointer.pointerId];\n        }\n        if (domElement !== void 0) this.connect(domElement);\n        this.update();\n    }\n}\nclass MapControls extends OrbitControls {\n    constructor(object, domElement){\n        super(object, domElement);\n        this.screenSpacePanning = false;\n        this.mouseButtons.LEFT = three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN;\n        this.mouseButtons.RIGHT = three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE;\n        this.touches.ONE = three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN;\n        this.touches.TWO = three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE;\n    }\n}\n //# sourceMappingURL=OrbitControls.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/controls/OrbitControls.js\n");

/***/ })

};
;